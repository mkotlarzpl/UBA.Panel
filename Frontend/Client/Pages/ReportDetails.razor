@page "/report/{ReportId}"
@using UBA.Panel.Report.Common.DTOs
@using UBA.Panel.Frontend.Client.Enums
@using UBA.Panel.Report.Common.Enums
@inject HttpClient HttpClient;
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavManager

<MudPaper Elevation="3" Style="margin-top: 10px; margin-bottom: 10px; padding: 10px;">
    <Loading IsLoading="_isLoading">
        <MudText Typo="Typo.h5">@Report?.Name</MudText>
        <a href='@($"/api/Reports/download/{ReportId}/{Report?.Name}/xlsx")'>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary">
                Download report
            </MudButton>
        </a>
        <MudForm>
            <MudRadioGroup @bind-Value="@SelectedFilteringMode">
                <MudRadio Value="@ReportItemFilteringModeEnum.All" Color="Color.Primary">Primary</MudRadio>
                <MudRadio Value="@ReportItemFilteringModeEnum.DuplicatedVins" Color="Color.Secondary">Duplicated vins</MudRadio>
                <MudRadio Value="@ReportItemFilteringModeEnum.Electric">Electric cars</MudRadio>
            </MudRadioGroup>
        </MudForm>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => OnUploadFileClicked())">Upload file</MudButton>
        <MudDataGrid T="ReportItemDto" Items="@_reportItems" Style="margin-top: 10px; margin-bottom: 10px;" 
                     EditMode="DataGridEditMode.Cell"
                     ReadOnly="false"
                     CommittedItemChanges="@CommittedItemChanges">
            <Columns>
                <PropertyColumn Property="x => x.RowId" Title="Id" IsEditable="false"/>
                <PropertyColumn Property="x => string.Join(x.FirstName, x.CompanyName)" Title="Name" IsEditable="false"/>
                <PropertyColumn Property="x => x.CompleteVin" Title="Vin" IsEditable="false"/>
                <PropertyColumn Property="x => x.IsElectric" Name="Is electric" IsEditable="false"/>
                <PropertyColumn Property="x => x.MappedVehicleClass" Title="Mapped vehicle class" IsEditable="false"/>
                <PropertyColumn Property="x => x.Status" Title="Status">
                    <EditTemplate>
                            <MudSelect @bind-Value="context.Item.Status" Required RequiredError="You must select a Status!!!" Margin="@Margin.Dense">
                                            <MudSelectItem Value="@StatusEnum.approved">approved</MudSelectItem>
                                            <MudSelectItem Value="@StatusEnum.certified">certified</MudSelectItem>
                                            <MudSelectItem Value="@StatusEnum.not_certified">not_certified</MudSelectItem>
                                            <MudSelectItem Value="@StatusEnum.paid">paid</MudSelectItem>
                                            <MudSelectItem Value="@StatusEnum.pending">pending</MudSelectItem>
                                            <MudSelectItem Value="@StatusEnum.rejected">rejected</MudSelectItem>
                                            <MudSelectItem Value="@StatusEnum.reviewed">reviewed</MudSelectItem>
                                            <MudSelectItem Value="@StatusEnum.submitted">submitted</MudSelectItem>
                            </MudSelect>
                    </EditTemplate>
                </PropertyColumn>
                <TemplateColumn IsEditable="false">
                    <CellTemplate>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Save" OnClick="@(() => CommittedItemChanges(context.Item))"/>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
        <MudPagination Color="Color.Primary" 
                       Count="@(Total/PageSize)"
                       Selected="@_selectedPage"
                       SelectedChanged="@((page) => OnSelectedChanges(page))"
                       />
    </Loading>
</MudPaper>

@code {
    [Parameter] public string ReportId { get; set; } = string.Empty;

    private int _selectedPage = 1;
    private bool _isLoading = true;
    public ReportDetailsDto? Report { get; set; }
    private IEnumerable<ReportItemDto> _reportItems = new List<ReportItemDto>();
    private int Total { get; set; }
    private int PageSize { get; set; } = 20;

    public ReportItemFilteringModeEnum SelectedFilteringMode
    {
        get => _selectedFilteringMode;
        set
        {
            _selectedFilteringMode = value;
            _selectedPage = 1;
            LoadData();
        }
    }
    private ReportItemFilteringModeEnum _selectedFilteringMode = ReportItemFilteringModeEnum.All;

    protected override async Task OnInitializedAsync()
    {
        var result = await HttpClient.GetFromJsonAsync<ReportDetailsDto>(
            $"/api/Reports/details/{ReportId}");

        if (result == null)
        {
            Snackbar.Add("Failed to load data", Severity.Error);
            return;
        }

        Report = result;
        _reportItems = result.ReportItems.Items;
        Total = result.ReportItems.Total;
        PageSize = result.ReportItems.PageSize;
        _isLoading = false;
        StateHasChanged();
        await base.OnInitializedAsync();
    }

    private async Task OnSelectedChanges(int page)
    {
        _selectedPage = page;
        await LoadData();
    }
    
    private async Task CommittedItemChanges(ReportItemDto item)
    {
        await HttpClient.PutAsJsonAsync("/api/Reports/item/status", 
            new UpdateReportItemStatusDto(
            item.Id,
            item.Status));
        Snackbar.Add("Status updated", Severity.Success);
    }

    private async Task LoadData()
    {
        _isLoading = true;
        StateHasChanged();
        switch (_selectedFilteringMode)
        {
            case ReportItemFilteringModeEnum.All:
                await FetchDataFromBackend($"/api/Reports/details/{ReportId}/items/{_selectedPage}");
                break;
            case ReportItemFilteringModeEnum.DuplicatedVins:
                await FetchDataFromBackend($"/api/Reports/details/{ReportId}/items/{_selectedPage}/duplicatedVins");
                break;
            case ReportItemFilteringModeEnum.Electric:
                await FetchDataFromBackend($"/api/Reports/details/{ReportId}/items/{_selectedPage}/electrics");
                break;
        }
        
        _isLoading = false;
        StateHasChanged();
    }

    private async Task FetchDataFromBackend(string url)
    {
        var result = await HttpClient.GetFromJsonAsync<PagedResultDto<ReportItemDto>>(url);

        if (result == null)
        {
            Snackbar.Add("Failed to load data", Severity.Error);
            return;
        }

        _reportItems = result.Items;
        Total = result.Total;
        PageSize = result.PageSize;
        StateHasChanged();
    }

    private async Task OnUploadFileClicked()
    {
        var parameters = new DialogParameters<FileUploadDialog> { { x => x.ReportId, ReportId } };

        var dialog = await DialogService.ShowAsync<FileUploadDialog>("Upload file", parameters);
        var result = await dialog.Result;
        if (result != DialogResult.Cancel())
        {
            await LoadData();
        }
    }
}